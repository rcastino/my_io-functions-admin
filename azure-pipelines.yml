# Azure DevOps pipeline to build, run tests, and more.

variables:
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn

pool:
  vmImage: 'ubuntu-latest'

stages:
  # A) Install modules and build
  - stage: Build
    jobs:
      - job: compile
        steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '10.14.1'
          displayName: 'Install Node.js'
        
        - task: Cache@2
          inputs:
            key: 'yarn | "$(Agent.OS)" | yarn.lock'
            restoreKeys: |
              yarn | "$(Agent.OS)"
              yarn
            path: $(YARN_CACHE_FOLDER)
          displayName: Cache Yarn packages

        - script: |
            yarn install --frozen-lockfile --no-progress --non-interactive --network-concurrency 1
          displayName: 'Install node modules'

        - script: |
            yarn build
          displayName: 'Build'


    # B) Analyse and validate code
  - stage: Validate
    dependsOn: Build
    jobs:
      # B1) Analyze source code
      - job: lint
        steps:
        - task: Cache@2
          inputs:
            key: 'yarn | "$(Agent.OS)" | yarn.lock'
            restoreKeys: |
              yarn | "$(Agent.OS)"
              yarn
            path: $(YARN_CACHE_FOLDER)
          displayName: Cache Yarn packages

        - script: |
            yarn install --frozen-lockfile --no-progress --non-interactive --network-concurrency 1
          displayName: 'Install node modules'

        - script: |
            yarn lint
          displayName: 'Lint'

      # B2) Validate OpenAPI spec 
      - job: lint_api
        steps:
        - task: Cache@2
          inputs:
            key: 'yarn | "$(Agent.OS)" | yarn.lock'
            restoreKeys: |
              yarn | "$(Agent.OS)"
              yarn
            path: $(YARN_CACHE_FOLDER)
          displayName: Cache Yarn packages

        - script: |
            yarn install --frozen-lockfile --no-progress --non-interactive --network-concurrency 1
          displayName: 'Install node modules'

        - script: |
            npm install oval
          displayName: 'Install OpenAPI validator'

        - script: |
            npx oval validate -p openapi/index.yaml
          displayName: 'Validate OpenAPI'

      # B3) Check danger 
      - job: danger
        steps:
        - task: Cache@2
          inputs:
            key: 'yarn | "$(Agent.OS)" | yarn.lock'
            restoreKeys: |
              yarn | "$(Agent.OS)"
              yarn
            path: $(YARN_CACHE_FOLDER)
          displayName: Cache Yarn packages

        - script: |
            [ -z "$DANGER_GITHUB_API_TOKEN" ] || yarn danger ci
          displayName: 'Danger CI'

    # C) Run unit tests
  - stage: Test
    dependsOn: Build
    jobs:
      - job: tests
        steps:
        - task: Cache@2
          inputs:
            key: 'yarn | "$(Agent.OS)" | yarn.lock'
            restoreKeys: |
              yarn | "$(Agent.OS)"
              yarn
            path: $(YARN_CACHE_FOLDER)
          displayName: Cache Yarn packages

        - script: |
            yarn install --frozen-lockfile --no-progress --non-interactive --network-concurrency 1
          displayName: 'Install node modules'

        - script: |
            yarn test:coverage
          displayName: 'Unit tests'

        # TODO: "bash <(curl -s https://codecov.io/bash)"
        - bash: |
            echo 'codecov'
          displayName: 'Code coverage'
    
