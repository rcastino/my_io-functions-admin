# Azure DevOps pipeline to build, check source codes, run tests, and deploy.
#
# The following variables needs to be defined before running the deployment jobs 
# defined in this pipeline:
# - STAGING_DEPLOY_TYPE: 'deploy_standard' || 'deploy_to_slots'
# - STAGING_AZURE_SUBSCRIPTION
# - STAGING_RESOURCE_GROUP_NAME
# - STAGING_FUNCTION_APP_NAME
# 
# - PRODUCTION_DEPLOY_TYPE: 'deploy_standard' || 'deploy_to_slots'
# - PRODUCTION_AZURE_SUBSCRIPTION
# - PRODUCTION_RESOURCE_GROUP_NAME
# - PRODUCTION_FUNCTION_APP_NAME
#
# To enable the deployment and define if using deployment slots you also need to 
# configure these variables:
# - DO_DEPLOY: if False or undefined all deployments are skipped

variables:
  NODE_VERSION: '10.14.1'

# This pipeline can be manually run or is automatically triggered whenever one 
# of the following condition is true:
# - a push is made to any branch in the repository (not only 'master')
# - a pull request is created
# - a tag named 'latest' is pushed
# Note. In the last case, the tag can be (re-)created using the Git CLI, e.g.:
#    git push -f origin <abfb967>:refs/tags/latest
# To force the deployment regardless the above conditions you must configure the
# following additional variables:
# - STAGING_FORCE_DEPLOY: True
# - PRODUCTION_FORCE_DEPLOY: True
trigger:
  branches:
    include:
      - '*'
      - refs/tags/latest

# This pipeline has been implemented to be run on hosted agent pools based both
# on 'windows' and 'ubuntu' virtual machine images and using the scripts defined
# in the package.json file. Since we are deploying on Azure functions on Windows
# runtime, the pipeline is currently configured to use a Windows hosted image.
pool:
  vmImage: 'windows-2019'

stages:
  # A) Build and code validation
  - stage: Build
    dependsOn: []
    jobs:
      # A1) Checkout, install module and build code
      - job: make_build      
        steps:
        - template: azure-templates/make-build-steps.yml
          parameters:
            make: build
            
      # A2) Analyze source code to find errors with lint
      - job: lint
        steps:
        - template: azure-templates/make-build-steps.yml
          parameters:
            make: install_dependencies

        - script: |
            yarn lint
          displayName: 'Lint'

      # A3) Validate API definition
      - job: lint_api
        steps:
        - script: |
            npx oval validate -p openapi/index.yaml
          displayName: 'Validate openAPI'

      # A4) Check source code with danger (ignore when master)
      - job: danger
        condition: and(succeeded(),
            and(
              variables['DANGER_GITHUB_API_TOKEN'], 
              ne(variables['Build.SourceBranch'], 'refs/heads/master')
            )
          )
        steps:
        - template: azure-templates/make-build-steps.yml
          parameters:
            make: install_dependencies

        - bash: |
            yarn danger ci
          displayName: 'Danger CI'


  # B) Run unit tests if there is a push or pull request on any branch.
  - stage: Test
    dependsOn: []
    jobs:
      - job: unit_tests
        steps:
        - task: UseNode@1
          inputs:
            version: $(NODE_VERSION)
          displayName: 'Set up Node.js'

        - template: azure-templates/make-build-steps.yml
          parameters:
            make: install_dependencies

        - script: |
            yarn test:coverage
          displayName: 'Unit tests exec'

        - bash: |
            bash <(curl -s https://codecov.io/bash)
          displayName: 'Code coverage'


  # C) Deploy to STAGE environment only if there is a push on 'master' branch.
  # Other conditions based on variables settings:
  # - if $DO_DEPLOY != True (or undefined) skip deployment, otherwise:
  #   - c1) $STAGING_DEPLOY_TYPE == deploy_standard: deploy to 'prodution' slot
  #   - c2) $STAGING_DEPLOY_TYPE == deploy_to_slots: deploy to 'staging' slot in PROD and 
  #         then swap 'staging' slot with 'production' slot
  - stage: Deploy_staging
    condition: and(
        succeeded(),
        and (
          eq(variables['DO_DEPLOY'], True),
          or(
            eq(variables['Build.SourceBranch'], 'refs/heads/master'),
            eq(variables['STAGING_FORCE_DEPLOY'], True)
          )
        )
      )
    dependsOn:
    - Build
    - Test
    jobs:
    - template: azure-templates/deploy-jobs.yml
      parameters:
        deployMode: '$(STAGING_DEPLOY_TYPE)'
        azureSubscription: '$(STAGING_AZURE_SUBSCRIPTION)'
        resourceGroupName: '$(STAGING_RESOURCE_GROUP_NAME)'
        appName: '$(STAGING_FUNCTION_APP_NAME)'


  # D) Deploy to PRODUCTION environment only if the 'latest' tag is pushed.
  # Other conditions based on variables settings:
  # - if $DO_DEPLOY != True (or undefined) skip deployment, otherwise:
  #   - c1) $PRODUCTION_DEPLOY_TYPE == deploy_standard: deploy to 'prodution' slot
  #   - c2) $PRODUCTION_DEPLOY_TYPE == deploy_to_slots: deploy to 'staging' slot in PROD and 
  #         then swap 'staging' slot with 'production' slot
  - stage: Deploy_production
    condition: and(
        succeeded(),
        and (
          eq(variables['DO_DEPLOY'], True),
          or(
            eq(variables['Build.SourceBranch'], 'refs/tags/latest'),
            eq(variables['PRODUCTION_FORCE_DEPLOY'], True),
            eq(variables['Build.Reason'], 'Manual')
          )
        )
      )
    dependsOn:
    - Build
    - Test
    jobs:
      # Option 1: deploy directly to 'production' slot
      - job: deploy_standard
        condition: and(succeeded(), eq(variables['PRODUCTION_DEPLOY_TYPE'], 'deploy_standard'))
        steps:
        - template: azure-templates/deploy-steps.yml
          parameters:
            deployType: 'deployToProductionSlot'
            azureSubscription: '$(PRODUCTION_AZURE_SUBSCRIPTION)'
            resourceGroupName: '$(PRODUCTION_RESOURCE_GROUP_NAME)'
            appName: '$(PRODUCTION_FUNCTION_APP_NAME)'

      # Option 2: deploy to staging slot and then swap with 'production' slot
      - job: deploy_to_slots
        condition: and(succeeded(), eq(variables['PRODUCTION_DEPLOY_TYPE'], 'deploy_to_slots'))
        steps:
        - template: azure-templates/deploy-steps.yml
          parameters:
            deployType: 'deployToStagingSlotAndSwap'
            azureSubscription: '$(PRODUCTION_AZURE_SUBSCRIPTION)'
            resourceGroupName: '$(PRODUCTION_RESOURCE_GROUP_NAME)'
            appName: '$(PRODUCTION_FUNCTION_APP_NAME)'
